[astsms]
exten => _.,1,NoOp(SMS From ${MESSAGE(from)} To ${MESSAGE(to)} Body ${MESSAGE(body)})
exten => _.,n,Set(TYPETO=${CUT(MESSAGE(to),:,1)})
exten => _.,n,ExecIf($[${REGEX("[<]" ${TYPETO})} = 1]?Set(TYPETO=${CUT(TYPETO,<,2)}))
exten => _.,n,Set(TO=${MESSAGE(to)})
exten => _.,n,ExecIf($[${REGEX("[@]" ${TO})} = 1]?Set(DOM=@${CUT(TO,@,2)}))
; Patch for forcing domain of extension (patch some broken client)
;exten => _.,n,Set(DOM=@example.com)
exten => _.,n,ExecIf($[${REGEX("[@]" ${TO})} = 1]?Set(TO=${CUT(TO,@,1)}))
exten => _.,n,ExecIf($[${REGEX("[<]" ${TO})} = 1]?Set(TO=${CUT(TO,<,2)}))
exten => _.,n,ExecIf($[${REGEX("[:]" ${TO})} = 1]?Set(TO=${CUT(TO,:,2)}))
exten => _.,n,Set(TYPEFROM=${CUT(MESSAGE(from),:,1)})
exten => _.,n,ExecIf($[${REGEX("[<]" ${TYPEFROM})} = 1]?Set(TYPEFROM=${CUT(TYPEFROM,<,2)}))
exten => _.,n,Set(FROM=${MESSAGE(from)})
exten => _.,n,ExecIf($[${REGEX("[@]" ${FROM})} = 1]?Set(FROM=${CUT(FROM,@,1)}))
exten => _.,n,ExecIf($[${REGEX("[<]" ${FROM})} = 1]?Set(FROM=${CUT(FROM,<,2)}))
exten => _.,n,ExecIf($[${REGEX("[:]" ${FROM})} = 1]?Set(FROM=${CUT(FROM,:,2)}))
exten => _.,n,ExecIf($["${TYPEFROM}" = "sips"]?Set(TYPEFROM=sip))
exten => _.,n,ExecIf($["${TYPEFROM}" = "pjsips"]?Set(TYPEFROM=pjsip))
exten => _.,n,ExecIf($["${TYPETO}" = "sips"]?Set(TYPETO=sip))
exten => _.,n,ExecIf($["${TYPETO}" = "pjsips"]?Set(TYPETO=pjsip))
exten => _.,n,Set(FROMSEND=${TYPEFROM}:${FROM}${DOM})
exten => _.,n,Set(TOSEND=${TYPETO}:${TO}${DOM})
exten => _.,n,Set(MESSAGE_DATA(X-Movial-Content)=application/x-movial-control\;forwarding=true)
exten => _.,n,MessageSend(${TOSEND},${FROMSEND})
exten => _.,n,GotoIf($["${MESSAGE_SEND_STATUS}" != "SUCCESS"]?sendfailedmsg)
exten => _.,n,NoOp(Send status is ${MESSAGE_SEND_STATUS})
exten => _.,n,Hangup()
;
; Handle failed messaging (send an sms to the sender from 'ServiceCenter' to explain the problem to consign)
exten => _.,n(sendfailedmsg),Set(MESSAGE(body)="[${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)}] Your message to ${EXTEN} has failed. Retry later.")
exten => _.,n,NoOp(Send failed because status is ${MESSAGE_SEND_STATUS})
; Patch for forcing sent to pjsip origin (patch some broken client that register as sip with pjsip extension)
;exten => _.,n,Set(FROMSEND=pjsip:${FROM}${DOM})
exten => _.,n,MessageSend(${FROMSEND},ServiceCenter)
exten => _.,n,NoOp(Send Alert status is ${MESSAGE_SEND_STATUS})
exten => _.,n,Hangup()
exten => _.,n,Hangup()
